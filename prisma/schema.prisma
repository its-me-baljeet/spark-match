generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  clerkId    String      @unique // Clerk User ID
  name       String
  age        Int
  bio        String?
  gender     String
  interests  String[]
  createdAt  DateTime    @default(now())

  // Relations
  images     UserImage[]
  likesSent  Like[]      @relation("LikesSent")
  likesRecv  Like[]      @relation("LikesRecv")
  matches1   Match[]     @relation("MatchesUser1")
  matches2   Match[]     @relation("MatchesUser2")
}

model UserImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  url       String   // Cloudinary secure_url
  publicId  String   // Cloudinary public_id (for deletion/transform)
  createdAt DateTime @default(now())
  order     Int?     // For sorting (first image = profile picture)
}

model Like {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  fromUser    User     @relation("LikesSent", fields: [fromUserId], references: [id])
  fromUserId  String   @db.ObjectId
  toUser      User     @relation("LikesRecv", fields: [toUserId], references: [id])
  toUserId    String   @db.ObjectId
  createdAt   DateTime @default(now())
}

model Match {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user1     User     @relation("MatchesUser1", fields: [user1Id], references: [id])
  user1Id   String   @db.ObjectId
  user2     User     @relation("MatchesUser2", fields: [user2Id], references: [id])
  user2Id   String   @db.ObjectId
  createdAt DateTime @default(now())
}
