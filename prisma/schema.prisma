generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  clerkId     String      @unique
  email       String      @unique
  name        String
  bio         String?
  gender      Gender
  birthday    DateTime
  location    Location
  photos      Photo[]
  preferences Preference?

  likesSent        Like[]            @relation("LikesSent")
  likesReceived    Like[]            @relation("LikesReceived")
  matchParticipants MatchParticipant[]
  messages          Message[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Photo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  publicId  String
  order     Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Preference {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.ObjectId
  minAge      Int      @default(18)
  maxAge      Int      @default(100)
  distanceKm  Int      @default(50)
  gender      Gender?
}

model Like {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  fromUser   User     @relation("LikesSent", fields: [fromUserId], references: [id])
  fromUserId String   @db.ObjectId
  toUser     User     @relation("LikesReceived", fields: [toUserId], references: [id])
  toUserId   String   @db.ObjectId
  createdAt  DateTime @default(now())
}

model Match {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  participants MatchParticipant[]
  messages     Message[]
  createdAt    DateTime           @default(now())
}

model MatchParticipant {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  match   Match    @relation(fields: [matchId], references: [id])
  matchId String   @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @db.ObjectId
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  isRead    Boolean  @default(false)
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   String   @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
}

type Location {
  lat Float
  lng Float
}
